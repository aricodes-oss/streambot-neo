// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"streambot/models"
)

func newBlacklistedUser(db *gorm.DB, opts ...gen.DOOption) blacklistedUser {
	_blacklistedUser := blacklistedUser{}

	_blacklistedUser.blacklistedUserDo.UseDB(db, opts...)
	_blacklistedUser.blacklistedUserDo.UseModel(&models.BlacklistedUser{})

	tableName := _blacklistedUser.blacklistedUserDo.TableName()
	_blacklistedUser.ALL = field.NewAsterisk(tableName)
	_blacklistedUser.ID = field.NewUint(tableName, "id")
	_blacklistedUser.CreatedAt = field.NewTime(tableName, "created_at")
	_blacklistedUser.UpdatedAt = field.NewTime(tableName, "updated_at")
	_blacklistedUser.DeletedAt = field.NewField(tableName, "deleted_at")
	_blacklistedUser.ReservationID = field.NewInt(tableName, "reservation_id")
	_blacklistedUser.UserID = field.NewString(tableName, "user_id")

	_blacklistedUser.fillFieldMap()

	return _blacklistedUser
}

type blacklistedUser struct {
	blacklistedUserDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	ReservationID field.Int
	UserID        field.String

	fieldMap map[string]field.Expr
}

func (b blacklistedUser) Table(newTableName string) *blacklistedUser {
	b.blacklistedUserDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b blacklistedUser) As(alias string) *blacklistedUser {
	b.blacklistedUserDo.DO = *(b.blacklistedUserDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *blacklistedUser) updateTableName(table string) *blacklistedUser {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewUint(table, "id")
	b.CreatedAt = field.NewTime(table, "created_at")
	b.UpdatedAt = field.NewTime(table, "updated_at")
	b.DeletedAt = field.NewField(table, "deleted_at")
	b.ReservationID = field.NewInt(table, "reservation_id")
	b.UserID = field.NewString(table, "user_id")

	b.fillFieldMap()

	return b
}

func (b *blacklistedUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *blacklistedUser) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 6)
	b.fieldMap["id"] = b.ID
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_at"] = b.UpdatedAt
	b.fieldMap["deleted_at"] = b.DeletedAt
	b.fieldMap["reservation_id"] = b.ReservationID
	b.fieldMap["user_id"] = b.UserID
}

func (b blacklistedUser) clone(db *gorm.DB) blacklistedUser {
	b.blacklistedUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b blacklistedUser) replaceDB(db *gorm.DB) blacklistedUser {
	b.blacklistedUserDo.ReplaceDB(db)
	return b
}

type blacklistedUserDo struct{ gen.DO }

type IBlacklistedUserDo interface {
	gen.SubQuery
	Debug() IBlacklistedUserDo
	WithContext(ctx context.Context) IBlacklistedUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBlacklistedUserDo
	WriteDB() IBlacklistedUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBlacklistedUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBlacklistedUserDo
	Not(conds ...gen.Condition) IBlacklistedUserDo
	Or(conds ...gen.Condition) IBlacklistedUserDo
	Select(conds ...field.Expr) IBlacklistedUserDo
	Where(conds ...gen.Condition) IBlacklistedUserDo
	Order(conds ...field.Expr) IBlacklistedUserDo
	Distinct(cols ...field.Expr) IBlacklistedUserDo
	Omit(cols ...field.Expr) IBlacklistedUserDo
	Join(table schema.Tabler, on ...field.Expr) IBlacklistedUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBlacklistedUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBlacklistedUserDo
	Group(cols ...field.Expr) IBlacklistedUserDo
	Having(conds ...gen.Condition) IBlacklistedUserDo
	Limit(limit int) IBlacklistedUserDo
	Offset(offset int) IBlacklistedUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBlacklistedUserDo
	Unscoped() IBlacklistedUserDo
	Create(values ...*models.BlacklistedUser) error
	CreateInBatches(values []*models.BlacklistedUser, batchSize int) error
	Save(values ...*models.BlacklistedUser) error
	First() (*models.BlacklistedUser, error)
	Take() (*models.BlacklistedUser, error)
	Last() (*models.BlacklistedUser, error)
	Find() ([]*models.BlacklistedUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.BlacklistedUser, err error)
	FindInBatches(result *[]*models.BlacklistedUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.BlacklistedUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBlacklistedUserDo
	Assign(attrs ...field.AssignExpr) IBlacklistedUserDo
	Joins(fields ...field.RelationField) IBlacklistedUserDo
	Preload(fields ...field.RelationField) IBlacklistedUserDo
	FirstOrInit() (*models.BlacklistedUser, error)
	FirstOrCreate() (*models.BlacklistedUser, error)
	FindByPage(offset int, limit int) (result []*models.BlacklistedUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBlacklistedUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b blacklistedUserDo) Debug() IBlacklistedUserDo {
	return b.withDO(b.DO.Debug())
}

func (b blacklistedUserDo) WithContext(ctx context.Context) IBlacklistedUserDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b blacklistedUserDo) ReadDB() IBlacklistedUserDo {
	return b.Clauses(dbresolver.Read)
}

func (b blacklistedUserDo) WriteDB() IBlacklistedUserDo {
	return b.Clauses(dbresolver.Write)
}

func (b blacklistedUserDo) Session(config *gorm.Session) IBlacklistedUserDo {
	return b.withDO(b.DO.Session(config))
}

func (b blacklistedUserDo) Clauses(conds ...clause.Expression) IBlacklistedUserDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b blacklistedUserDo) Returning(value interface{}, columns ...string) IBlacklistedUserDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b blacklistedUserDo) Not(conds ...gen.Condition) IBlacklistedUserDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b blacklistedUserDo) Or(conds ...gen.Condition) IBlacklistedUserDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b blacklistedUserDo) Select(conds ...field.Expr) IBlacklistedUserDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b blacklistedUserDo) Where(conds ...gen.Condition) IBlacklistedUserDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b blacklistedUserDo) Order(conds ...field.Expr) IBlacklistedUserDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b blacklistedUserDo) Distinct(cols ...field.Expr) IBlacklistedUserDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b blacklistedUserDo) Omit(cols ...field.Expr) IBlacklistedUserDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b blacklistedUserDo) Join(table schema.Tabler, on ...field.Expr) IBlacklistedUserDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b blacklistedUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBlacklistedUserDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b blacklistedUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IBlacklistedUserDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b blacklistedUserDo) Group(cols ...field.Expr) IBlacklistedUserDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b blacklistedUserDo) Having(conds ...gen.Condition) IBlacklistedUserDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b blacklistedUserDo) Limit(limit int) IBlacklistedUserDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b blacklistedUserDo) Offset(offset int) IBlacklistedUserDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b blacklistedUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBlacklistedUserDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b blacklistedUserDo) Unscoped() IBlacklistedUserDo {
	return b.withDO(b.DO.Unscoped())
}

func (b blacklistedUserDo) Create(values ...*models.BlacklistedUser) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b blacklistedUserDo) CreateInBatches(values []*models.BlacklistedUser, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b blacklistedUserDo) Save(values ...*models.BlacklistedUser) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b blacklistedUserDo) First() (*models.BlacklistedUser, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.BlacklistedUser), nil
	}
}

func (b blacklistedUserDo) Take() (*models.BlacklistedUser, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.BlacklistedUser), nil
	}
}

func (b blacklistedUserDo) Last() (*models.BlacklistedUser, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.BlacklistedUser), nil
	}
}

func (b blacklistedUserDo) Find() ([]*models.BlacklistedUser, error) {
	result, err := b.DO.Find()
	return result.([]*models.BlacklistedUser), err
}

func (b blacklistedUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.BlacklistedUser, err error) {
	buf := make([]*models.BlacklistedUser, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b blacklistedUserDo) FindInBatches(result *[]*models.BlacklistedUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b blacklistedUserDo) Attrs(attrs ...field.AssignExpr) IBlacklistedUserDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b blacklistedUserDo) Assign(attrs ...field.AssignExpr) IBlacklistedUserDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b blacklistedUserDo) Joins(fields ...field.RelationField) IBlacklistedUserDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b blacklistedUserDo) Preload(fields ...field.RelationField) IBlacklistedUserDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b blacklistedUserDo) FirstOrInit() (*models.BlacklistedUser, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.BlacklistedUser), nil
	}
}

func (b blacklistedUserDo) FirstOrCreate() (*models.BlacklistedUser, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.BlacklistedUser), nil
	}
}

func (b blacklistedUserDo) FindByPage(offset int, limit int) (result []*models.BlacklistedUser, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b blacklistedUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b blacklistedUserDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b blacklistedUserDo) Delete(models ...*models.BlacklistedUser) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *blacklistedUserDo) withDO(do gen.Dao) *blacklistedUserDo {
	b.DO = *do.(*gen.DO)
	return b
}
