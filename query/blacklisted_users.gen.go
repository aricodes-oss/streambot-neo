// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"streambot/models"
)

func newBlacklistedUsers(db *gorm.DB, opts ...gen.DOOption) blacklistedUsers {
	_blacklistedUsers := blacklistedUsers{}

	_blacklistedUsers.blacklistedUsersDo.UseDB(db, opts...)
	_blacklistedUsers.blacklistedUsersDo.UseModel(&models.BlacklistedUsers{})

	tableName := _blacklistedUsers.blacklistedUsersDo.TableName()
	_blacklistedUsers.ALL = field.NewAsterisk(tableName)
	_blacklistedUsers.ID = field.NewUint(tableName, "id")
	_blacklistedUsers.CreatedAt = field.NewTime(tableName, "created_at")
	_blacklistedUsers.UpdatedAt = field.NewTime(tableName, "updated_at")
	_blacklistedUsers.DeletedAt = field.NewField(tableName, "deleted_at")
	_blacklistedUsers.ReservationID = field.NewInt(tableName, "reservation_id")
	_blacklistedUsers.UserID = field.NewString(tableName, "user_id")

	_blacklistedUsers.fillFieldMap()

	return _blacklistedUsers
}

type blacklistedUsers struct {
	blacklistedUsersDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	ReservationID field.Int
	UserID        field.String

	fieldMap map[string]field.Expr
}

func (b blacklistedUsers) Table(newTableName string) *blacklistedUsers {
	b.blacklistedUsersDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b blacklistedUsers) As(alias string) *blacklistedUsers {
	b.blacklistedUsersDo.DO = *(b.blacklistedUsersDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *blacklistedUsers) updateTableName(table string) *blacklistedUsers {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewUint(table, "id")
	b.CreatedAt = field.NewTime(table, "created_at")
	b.UpdatedAt = field.NewTime(table, "updated_at")
	b.DeletedAt = field.NewField(table, "deleted_at")
	b.ReservationID = field.NewInt(table, "reservation_id")
	b.UserID = field.NewString(table, "user_id")

	b.fillFieldMap()

	return b
}

func (b *blacklistedUsers) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *blacklistedUsers) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 6)
	b.fieldMap["id"] = b.ID
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_at"] = b.UpdatedAt
	b.fieldMap["deleted_at"] = b.DeletedAt
	b.fieldMap["reservation_id"] = b.ReservationID
	b.fieldMap["user_id"] = b.UserID
}

func (b blacklistedUsers) clone(db *gorm.DB) blacklistedUsers {
	b.blacklistedUsersDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b blacklistedUsers) replaceDB(db *gorm.DB) blacklistedUsers {
	b.blacklistedUsersDo.ReplaceDB(db)
	return b
}

type blacklistedUsersDo struct{ gen.DO }

type IBlacklistedUsersDo interface {
	gen.SubQuery
	Debug() IBlacklistedUsersDo
	WithContext(ctx context.Context) IBlacklistedUsersDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBlacklistedUsersDo
	WriteDB() IBlacklistedUsersDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBlacklistedUsersDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBlacklistedUsersDo
	Not(conds ...gen.Condition) IBlacklistedUsersDo
	Or(conds ...gen.Condition) IBlacklistedUsersDo
	Select(conds ...field.Expr) IBlacklistedUsersDo
	Where(conds ...gen.Condition) IBlacklistedUsersDo
	Order(conds ...field.Expr) IBlacklistedUsersDo
	Distinct(cols ...field.Expr) IBlacklistedUsersDo
	Omit(cols ...field.Expr) IBlacklistedUsersDo
	Join(table schema.Tabler, on ...field.Expr) IBlacklistedUsersDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBlacklistedUsersDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBlacklistedUsersDo
	Group(cols ...field.Expr) IBlacklistedUsersDo
	Having(conds ...gen.Condition) IBlacklistedUsersDo
	Limit(limit int) IBlacklistedUsersDo
	Offset(offset int) IBlacklistedUsersDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBlacklistedUsersDo
	Unscoped() IBlacklistedUsersDo
	Create(values ...*models.BlacklistedUsers) error
	CreateInBatches(values []*models.BlacklistedUsers, batchSize int) error
	Save(values ...*models.BlacklistedUsers) error
	First() (*models.BlacklistedUsers, error)
	Take() (*models.BlacklistedUsers, error)
	Last() (*models.BlacklistedUsers, error)
	Find() ([]*models.BlacklistedUsers, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.BlacklistedUsers, err error)
	FindInBatches(result *[]*models.BlacklistedUsers, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.BlacklistedUsers) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBlacklistedUsersDo
	Assign(attrs ...field.AssignExpr) IBlacklistedUsersDo
	Joins(fields ...field.RelationField) IBlacklistedUsersDo
	Preload(fields ...field.RelationField) IBlacklistedUsersDo
	FirstOrInit() (*models.BlacklistedUsers, error)
	FirstOrCreate() (*models.BlacklistedUsers, error)
	FindByPage(offset int, limit int) (result []*models.BlacklistedUsers, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBlacklistedUsersDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b blacklistedUsersDo) Debug() IBlacklistedUsersDo {
	return b.withDO(b.DO.Debug())
}

func (b blacklistedUsersDo) WithContext(ctx context.Context) IBlacklistedUsersDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b blacklistedUsersDo) ReadDB() IBlacklistedUsersDo {
	return b.Clauses(dbresolver.Read)
}

func (b blacklistedUsersDo) WriteDB() IBlacklistedUsersDo {
	return b.Clauses(dbresolver.Write)
}

func (b blacklistedUsersDo) Session(config *gorm.Session) IBlacklistedUsersDo {
	return b.withDO(b.DO.Session(config))
}

func (b blacklistedUsersDo) Clauses(conds ...clause.Expression) IBlacklistedUsersDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b blacklistedUsersDo) Returning(value interface{}, columns ...string) IBlacklistedUsersDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b blacklistedUsersDo) Not(conds ...gen.Condition) IBlacklistedUsersDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b blacklistedUsersDo) Or(conds ...gen.Condition) IBlacklistedUsersDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b blacklistedUsersDo) Select(conds ...field.Expr) IBlacklistedUsersDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b blacklistedUsersDo) Where(conds ...gen.Condition) IBlacklistedUsersDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b blacklistedUsersDo) Order(conds ...field.Expr) IBlacklistedUsersDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b blacklistedUsersDo) Distinct(cols ...field.Expr) IBlacklistedUsersDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b blacklistedUsersDo) Omit(cols ...field.Expr) IBlacklistedUsersDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b blacklistedUsersDo) Join(table schema.Tabler, on ...field.Expr) IBlacklistedUsersDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b blacklistedUsersDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBlacklistedUsersDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b blacklistedUsersDo) RightJoin(table schema.Tabler, on ...field.Expr) IBlacklistedUsersDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b blacklistedUsersDo) Group(cols ...field.Expr) IBlacklistedUsersDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b blacklistedUsersDo) Having(conds ...gen.Condition) IBlacklistedUsersDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b blacklistedUsersDo) Limit(limit int) IBlacklistedUsersDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b blacklistedUsersDo) Offset(offset int) IBlacklistedUsersDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b blacklistedUsersDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBlacklistedUsersDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b blacklistedUsersDo) Unscoped() IBlacklistedUsersDo {
	return b.withDO(b.DO.Unscoped())
}

func (b blacklistedUsersDo) Create(values ...*models.BlacklistedUsers) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b blacklistedUsersDo) CreateInBatches(values []*models.BlacklistedUsers, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b blacklistedUsersDo) Save(values ...*models.BlacklistedUsers) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b blacklistedUsersDo) First() (*models.BlacklistedUsers, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.BlacklistedUsers), nil
	}
}

func (b blacklistedUsersDo) Take() (*models.BlacklistedUsers, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.BlacklistedUsers), nil
	}
}

func (b blacklistedUsersDo) Last() (*models.BlacklistedUsers, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.BlacklistedUsers), nil
	}
}

func (b blacklistedUsersDo) Find() ([]*models.BlacklistedUsers, error) {
	result, err := b.DO.Find()
	return result.([]*models.BlacklistedUsers), err
}

func (b blacklistedUsersDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.BlacklistedUsers, err error) {
	buf := make([]*models.BlacklistedUsers, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b blacklistedUsersDo) FindInBatches(result *[]*models.BlacklistedUsers, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b blacklistedUsersDo) Attrs(attrs ...field.AssignExpr) IBlacklistedUsersDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b blacklistedUsersDo) Assign(attrs ...field.AssignExpr) IBlacklistedUsersDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b blacklistedUsersDo) Joins(fields ...field.RelationField) IBlacklistedUsersDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b blacklistedUsersDo) Preload(fields ...field.RelationField) IBlacklistedUsersDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b blacklistedUsersDo) FirstOrInit() (*models.BlacklistedUsers, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.BlacklistedUsers), nil
	}
}

func (b blacklistedUsersDo) FirstOrCreate() (*models.BlacklistedUsers, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.BlacklistedUsers), nil
	}
}

func (b blacklistedUsersDo) FindByPage(offset int, limit int) (result []*models.BlacklistedUsers, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b blacklistedUsersDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b blacklistedUsersDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b blacklistedUsersDo) Delete(models ...*models.BlacklistedUsers) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *blacklistedUsersDo) withDO(do gen.Dao) *blacklistedUsersDo {
	b.DO = *do.(*gen.DO)
	return b
}
