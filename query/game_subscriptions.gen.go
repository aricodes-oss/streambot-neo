// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"streambot/models"
)

func newGameSubscriptions(db *gorm.DB, opts ...gen.DOOption) gameSubscriptions {
	_gameSubscriptions := gameSubscriptions{}

	_gameSubscriptions.gameSubscriptionsDo.UseDB(db, opts...)
	_gameSubscriptions.gameSubscriptionsDo.UseModel(&models.GameSubscriptions{})

	tableName := _gameSubscriptions.gameSubscriptionsDo.TableName()
	_gameSubscriptions.ALL = field.NewAsterisk(tableName)
	_gameSubscriptions.ID = field.NewUint(tableName, "id")
	_gameSubscriptions.CreatedAt = field.NewTime(tableName, "created_at")
	_gameSubscriptions.UpdatedAt = field.NewTime(tableName, "updated_at")
	_gameSubscriptions.DeletedAt = field.NewField(tableName, "deleted_at")
	_gameSubscriptions.ReservationID = field.NewInt(tableName, "reservation_id")
	_gameSubscriptions.GameID = field.NewString(tableName, "game_id")
	_gameSubscriptions.Name = field.NewString(tableName, "name")

	_gameSubscriptions.fillFieldMap()

	return _gameSubscriptions
}

type gameSubscriptions struct {
	gameSubscriptionsDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	ReservationID field.Int
	GameID        field.String
	Name          field.String

	fieldMap map[string]field.Expr
}

func (g gameSubscriptions) Table(newTableName string) *gameSubscriptions {
	g.gameSubscriptionsDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gameSubscriptions) As(alias string) *gameSubscriptions {
	g.gameSubscriptionsDo.DO = *(g.gameSubscriptionsDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gameSubscriptions) updateTableName(table string) *gameSubscriptions {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewUint(table, "id")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.DeletedAt = field.NewField(table, "deleted_at")
	g.ReservationID = field.NewInt(table, "reservation_id")
	g.GameID = field.NewString(table, "game_id")
	g.Name = field.NewString(table, "name")

	g.fillFieldMap()

	return g
}

func (g *gameSubscriptions) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gameSubscriptions) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 7)
	g.fieldMap["id"] = g.ID
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["deleted_at"] = g.DeletedAt
	g.fieldMap["reservation_id"] = g.ReservationID
	g.fieldMap["game_id"] = g.GameID
	g.fieldMap["name"] = g.Name
}

func (g gameSubscriptions) clone(db *gorm.DB) gameSubscriptions {
	g.gameSubscriptionsDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gameSubscriptions) replaceDB(db *gorm.DB) gameSubscriptions {
	g.gameSubscriptionsDo.ReplaceDB(db)
	return g
}

type gameSubscriptionsDo struct{ gen.DO }

type IGameSubscriptionsDo interface {
	gen.SubQuery
	Debug() IGameSubscriptionsDo
	WithContext(ctx context.Context) IGameSubscriptionsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGameSubscriptionsDo
	WriteDB() IGameSubscriptionsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGameSubscriptionsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGameSubscriptionsDo
	Not(conds ...gen.Condition) IGameSubscriptionsDo
	Or(conds ...gen.Condition) IGameSubscriptionsDo
	Select(conds ...field.Expr) IGameSubscriptionsDo
	Where(conds ...gen.Condition) IGameSubscriptionsDo
	Order(conds ...field.Expr) IGameSubscriptionsDo
	Distinct(cols ...field.Expr) IGameSubscriptionsDo
	Omit(cols ...field.Expr) IGameSubscriptionsDo
	Join(table schema.Tabler, on ...field.Expr) IGameSubscriptionsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGameSubscriptionsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGameSubscriptionsDo
	Group(cols ...field.Expr) IGameSubscriptionsDo
	Having(conds ...gen.Condition) IGameSubscriptionsDo
	Limit(limit int) IGameSubscriptionsDo
	Offset(offset int) IGameSubscriptionsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGameSubscriptionsDo
	Unscoped() IGameSubscriptionsDo
	Create(values ...*models.GameSubscriptions) error
	CreateInBatches(values []*models.GameSubscriptions, batchSize int) error
	Save(values ...*models.GameSubscriptions) error
	First() (*models.GameSubscriptions, error)
	Take() (*models.GameSubscriptions, error)
	Last() (*models.GameSubscriptions, error)
	Find() ([]*models.GameSubscriptions, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.GameSubscriptions, err error)
	FindInBatches(result *[]*models.GameSubscriptions, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.GameSubscriptions) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGameSubscriptionsDo
	Assign(attrs ...field.AssignExpr) IGameSubscriptionsDo
	Joins(fields ...field.RelationField) IGameSubscriptionsDo
	Preload(fields ...field.RelationField) IGameSubscriptionsDo
	FirstOrInit() (*models.GameSubscriptions, error)
	FirstOrCreate() (*models.GameSubscriptions, error)
	FindByPage(offset int, limit int) (result []*models.GameSubscriptions, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGameSubscriptionsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gameSubscriptionsDo) Debug() IGameSubscriptionsDo {
	return g.withDO(g.DO.Debug())
}

func (g gameSubscriptionsDo) WithContext(ctx context.Context) IGameSubscriptionsDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gameSubscriptionsDo) ReadDB() IGameSubscriptionsDo {
	return g.Clauses(dbresolver.Read)
}

func (g gameSubscriptionsDo) WriteDB() IGameSubscriptionsDo {
	return g.Clauses(dbresolver.Write)
}

func (g gameSubscriptionsDo) Session(config *gorm.Session) IGameSubscriptionsDo {
	return g.withDO(g.DO.Session(config))
}

func (g gameSubscriptionsDo) Clauses(conds ...clause.Expression) IGameSubscriptionsDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gameSubscriptionsDo) Returning(value interface{}, columns ...string) IGameSubscriptionsDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gameSubscriptionsDo) Not(conds ...gen.Condition) IGameSubscriptionsDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gameSubscriptionsDo) Or(conds ...gen.Condition) IGameSubscriptionsDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gameSubscriptionsDo) Select(conds ...field.Expr) IGameSubscriptionsDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gameSubscriptionsDo) Where(conds ...gen.Condition) IGameSubscriptionsDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gameSubscriptionsDo) Order(conds ...field.Expr) IGameSubscriptionsDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gameSubscriptionsDo) Distinct(cols ...field.Expr) IGameSubscriptionsDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gameSubscriptionsDo) Omit(cols ...field.Expr) IGameSubscriptionsDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gameSubscriptionsDo) Join(table schema.Tabler, on ...field.Expr) IGameSubscriptionsDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gameSubscriptionsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGameSubscriptionsDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gameSubscriptionsDo) RightJoin(table schema.Tabler, on ...field.Expr) IGameSubscriptionsDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gameSubscriptionsDo) Group(cols ...field.Expr) IGameSubscriptionsDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gameSubscriptionsDo) Having(conds ...gen.Condition) IGameSubscriptionsDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gameSubscriptionsDo) Limit(limit int) IGameSubscriptionsDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gameSubscriptionsDo) Offset(offset int) IGameSubscriptionsDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gameSubscriptionsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGameSubscriptionsDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gameSubscriptionsDo) Unscoped() IGameSubscriptionsDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gameSubscriptionsDo) Create(values ...*models.GameSubscriptions) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gameSubscriptionsDo) CreateInBatches(values []*models.GameSubscriptions, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gameSubscriptionsDo) Save(values ...*models.GameSubscriptions) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gameSubscriptionsDo) First() (*models.GameSubscriptions, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.GameSubscriptions), nil
	}
}

func (g gameSubscriptionsDo) Take() (*models.GameSubscriptions, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.GameSubscriptions), nil
	}
}

func (g gameSubscriptionsDo) Last() (*models.GameSubscriptions, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.GameSubscriptions), nil
	}
}

func (g gameSubscriptionsDo) Find() ([]*models.GameSubscriptions, error) {
	result, err := g.DO.Find()
	return result.([]*models.GameSubscriptions), err
}

func (g gameSubscriptionsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.GameSubscriptions, err error) {
	buf := make([]*models.GameSubscriptions, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gameSubscriptionsDo) FindInBatches(result *[]*models.GameSubscriptions, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gameSubscriptionsDo) Attrs(attrs ...field.AssignExpr) IGameSubscriptionsDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gameSubscriptionsDo) Assign(attrs ...field.AssignExpr) IGameSubscriptionsDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gameSubscriptionsDo) Joins(fields ...field.RelationField) IGameSubscriptionsDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gameSubscriptionsDo) Preload(fields ...field.RelationField) IGameSubscriptionsDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gameSubscriptionsDo) FirstOrInit() (*models.GameSubscriptions, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.GameSubscriptions), nil
	}
}

func (g gameSubscriptionsDo) FirstOrCreate() (*models.GameSubscriptions, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.GameSubscriptions), nil
	}
}

func (g gameSubscriptionsDo) FindByPage(offset int, limit int) (result []*models.GameSubscriptions, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gameSubscriptionsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gameSubscriptionsDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gameSubscriptionsDo) Delete(models ...*models.GameSubscriptions) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gameSubscriptionsDo) withDO(do gen.Dao) *gameSubscriptionsDo {
	g.DO = *do.(*gen.DO)
	return g
}
