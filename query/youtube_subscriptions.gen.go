// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"streambot/models"
)

func newYoutubeSubscription(db *gorm.DB, opts ...gen.DOOption) youtubeSubscription {
	_youtubeSubscription := youtubeSubscription{}

	_youtubeSubscription.youtubeSubscriptionDo.UseDB(db, opts...)
	_youtubeSubscription.youtubeSubscriptionDo.UseModel(&models.YoutubeSubscription{})

	tableName := _youtubeSubscription.youtubeSubscriptionDo.TableName()
	_youtubeSubscription.ALL = field.NewAsterisk(tableName)
	_youtubeSubscription.ID = field.NewUint(tableName, "id")
	_youtubeSubscription.CreatedAt = field.NewTime(tableName, "created_at")
	_youtubeSubscription.UpdatedAt = field.NewTime(tableName, "updated_at")
	_youtubeSubscription.DeletedAt = field.NewField(tableName, "deleted_at")
	_youtubeSubscription.ReservationID = field.NewInt(tableName, "reservation_id")
	_youtubeSubscription.ChannelID = field.NewString(tableName, "channel_id")

	_youtubeSubscription.fillFieldMap()

	return _youtubeSubscription
}

type youtubeSubscription struct {
	youtubeSubscriptionDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	ReservationID field.Int
	ChannelID     field.String

	fieldMap map[string]field.Expr
}

func (y youtubeSubscription) Table(newTableName string) *youtubeSubscription {
	y.youtubeSubscriptionDo.UseTable(newTableName)
	return y.updateTableName(newTableName)
}

func (y youtubeSubscription) As(alias string) *youtubeSubscription {
	y.youtubeSubscriptionDo.DO = *(y.youtubeSubscriptionDo.As(alias).(*gen.DO))
	return y.updateTableName(alias)
}

func (y *youtubeSubscription) updateTableName(table string) *youtubeSubscription {
	y.ALL = field.NewAsterisk(table)
	y.ID = field.NewUint(table, "id")
	y.CreatedAt = field.NewTime(table, "created_at")
	y.UpdatedAt = field.NewTime(table, "updated_at")
	y.DeletedAt = field.NewField(table, "deleted_at")
	y.ReservationID = field.NewInt(table, "reservation_id")
	y.ChannelID = field.NewString(table, "channel_id")

	y.fillFieldMap()

	return y
}

func (y *youtubeSubscription) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := y.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (y *youtubeSubscription) fillFieldMap() {
	y.fieldMap = make(map[string]field.Expr, 6)
	y.fieldMap["id"] = y.ID
	y.fieldMap["created_at"] = y.CreatedAt
	y.fieldMap["updated_at"] = y.UpdatedAt
	y.fieldMap["deleted_at"] = y.DeletedAt
	y.fieldMap["reservation_id"] = y.ReservationID
	y.fieldMap["channel_id"] = y.ChannelID
}

func (y youtubeSubscription) clone(db *gorm.DB) youtubeSubscription {
	y.youtubeSubscriptionDo.ReplaceConnPool(db.Statement.ConnPool)
	return y
}

func (y youtubeSubscription) replaceDB(db *gorm.DB) youtubeSubscription {
	y.youtubeSubscriptionDo.ReplaceDB(db)
	return y
}

type youtubeSubscriptionDo struct{ gen.DO }

type IYoutubeSubscriptionDo interface {
	gen.SubQuery
	Debug() IYoutubeSubscriptionDo
	WithContext(ctx context.Context) IYoutubeSubscriptionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IYoutubeSubscriptionDo
	WriteDB() IYoutubeSubscriptionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IYoutubeSubscriptionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IYoutubeSubscriptionDo
	Not(conds ...gen.Condition) IYoutubeSubscriptionDo
	Or(conds ...gen.Condition) IYoutubeSubscriptionDo
	Select(conds ...field.Expr) IYoutubeSubscriptionDo
	Where(conds ...gen.Condition) IYoutubeSubscriptionDo
	Order(conds ...field.Expr) IYoutubeSubscriptionDo
	Distinct(cols ...field.Expr) IYoutubeSubscriptionDo
	Omit(cols ...field.Expr) IYoutubeSubscriptionDo
	Join(table schema.Tabler, on ...field.Expr) IYoutubeSubscriptionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IYoutubeSubscriptionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IYoutubeSubscriptionDo
	Group(cols ...field.Expr) IYoutubeSubscriptionDo
	Having(conds ...gen.Condition) IYoutubeSubscriptionDo
	Limit(limit int) IYoutubeSubscriptionDo
	Offset(offset int) IYoutubeSubscriptionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IYoutubeSubscriptionDo
	Unscoped() IYoutubeSubscriptionDo
	Create(values ...*models.YoutubeSubscription) error
	CreateInBatches(values []*models.YoutubeSubscription, batchSize int) error
	Save(values ...*models.YoutubeSubscription) error
	First() (*models.YoutubeSubscription, error)
	Take() (*models.YoutubeSubscription, error)
	Last() (*models.YoutubeSubscription, error)
	Find() ([]*models.YoutubeSubscription, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.YoutubeSubscription, err error)
	FindInBatches(result *[]*models.YoutubeSubscription, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.YoutubeSubscription) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IYoutubeSubscriptionDo
	Assign(attrs ...field.AssignExpr) IYoutubeSubscriptionDo
	Joins(fields ...field.RelationField) IYoutubeSubscriptionDo
	Preload(fields ...field.RelationField) IYoutubeSubscriptionDo
	FirstOrInit() (*models.YoutubeSubscription, error)
	FirstOrCreate() (*models.YoutubeSubscription, error)
	FindByPage(offset int, limit int) (result []*models.YoutubeSubscription, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IYoutubeSubscriptionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (y youtubeSubscriptionDo) Debug() IYoutubeSubscriptionDo {
	return y.withDO(y.DO.Debug())
}

func (y youtubeSubscriptionDo) WithContext(ctx context.Context) IYoutubeSubscriptionDo {
	return y.withDO(y.DO.WithContext(ctx))
}

func (y youtubeSubscriptionDo) ReadDB() IYoutubeSubscriptionDo {
	return y.Clauses(dbresolver.Read)
}

func (y youtubeSubscriptionDo) WriteDB() IYoutubeSubscriptionDo {
	return y.Clauses(dbresolver.Write)
}

func (y youtubeSubscriptionDo) Session(config *gorm.Session) IYoutubeSubscriptionDo {
	return y.withDO(y.DO.Session(config))
}

func (y youtubeSubscriptionDo) Clauses(conds ...clause.Expression) IYoutubeSubscriptionDo {
	return y.withDO(y.DO.Clauses(conds...))
}

func (y youtubeSubscriptionDo) Returning(value interface{}, columns ...string) IYoutubeSubscriptionDo {
	return y.withDO(y.DO.Returning(value, columns...))
}

func (y youtubeSubscriptionDo) Not(conds ...gen.Condition) IYoutubeSubscriptionDo {
	return y.withDO(y.DO.Not(conds...))
}

func (y youtubeSubscriptionDo) Or(conds ...gen.Condition) IYoutubeSubscriptionDo {
	return y.withDO(y.DO.Or(conds...))
}

func (y youtubeSubscriptionDo) Select(conds ...field.Expr) IYoutubeSubscriptionDo {
	return y.withDO(y.DO.Select(conds...))
}

func (y youtubeSubscriptionDo) Where(conds ...gen.Condition) IYoutubeSubscriptionDo {
	return y.withDO(y.DO.Where(conds...))
}

func (y youtubeSubscriptionDo) Order(conds ...field.Expr) IYoutubeSubscriptionDo {
	return y.withDO(y.DO.Order(conds...))
}

func (y youtubeSubscriptionDo) Distinct(cols ...field.Expr) IYoutubeSubscriptionDo {
	return y.withDO(y.DO.Distinct(cols...))
}

func (y youtubeSubscriptionDo) Omit(cols ...field.Expr) IYoutubeSubscriptionDo {
	return y.withDO(y.DO.Omit(cols...))
}

func (y youtubeSubscriptionDo) Join(table schema.Tabler, on ...field.Expr) IYoutubeSubscriptionDo {
	return y.withDO(y.DO.Join(table, on...))
}

func (y youtubeSubscriptionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IYoutubeSubscriptionDo {
	return y.withDO(y.DO.LeftJoin(table, on...))
}

func (y youtubeSubscriptionDo) RightJoin(table schema.Tabler, on ...field.Expr) IYoutubeSubscriptionDo {
	return y.withDO(y.DO.RightJoin(table, on...))
}

func (y youtubeSubscriptionDo) Group(cols ...field.Expr) IYoutubeSubscriptionDo {
	return y.withDO(y.DO.Group(cols...))
}

func (y youtubeSubscriptionDo) Having(conds ...gen.Condition) IYoutubeSubscriptionDo {
	return y.withDO(y.DO.Having(conds...))
}

func (y youtubeSubscriptionDo) Limit(limit int) IYoutubeSubscriptionDo {
	return y.withDO(y.DO.Limit(limit))
}

func (y youtubeSubscriptionDo) Offset(offset int) IYoutubeSubscriptionDo {
	return y.withDO(y.DO.Offset(offset))
}

func (y youtubeSubscriptionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IYoutubeSubscriptionDo {
	return y.withDO(y.DO.Scopes(funcs...))
}

func (y youtubeSubscriptionDo) Unscoped() IYoutubeSubscriptionDo {
	return y.withDO(y.DO.Unscoped())
}

func (y youtubeSubscriptionDo) Create(values ...*models.YoutubeSubscription) error {
	if len(values) == 0 {
		return nil
	}
	return y.DO.Create(values)
}

func (y youtubeSubscriptionDo) CreateInBatches(values []*models.YoutubeSubscription, batchSize int) error {
	return y.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (y youtubeSubscriptionDo) Save(values ...*models.YoutubeSubscription) error {
	if len(values) == 0 {
		return nil
	}
	return y.DO.Save(values)
}

func (y youtubeSubscriptionDo) First() (*models.YoutubeSubscription, error) {
	if result, err := y.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.YoutubeSubscription), nil
	}
}

func (y youtubeSubscriptionDo) Take() (*models.YoutubeSubscription, error) {
	if result, err := y.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.YoutubeSubscription), nil
	}
}

func (y youtubeSubscriptionDo) Last() (*models.YoutubeSubscription, error) {
	if result, err := y.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.YoutubeSubscription), nil
	}
}

func (y youtubeSubscriptionDo) Find() ([]*models.YoutubeSubscription, error) {
	result, err := y.DO.Find()
	return result.([]*models.YoutubeSubscription), err
}

func (y youtubeSubscriptionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.YoutubeSubscription, err error) {
	buf := make([]*models.YoutubeSubscription, 0, batchSize)
	err = y.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (y youtubeSubscriptionDo) FindInBatches(result *[]*models.YoutubeSubscription, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return y.DO.FindInBatches(result, batchSize, fc)
}

func (y youtubeSubscriptionDo) Attrs(attrs ...field.AssignExpr) IYoutubeSubscriptionDo {
	return y.withDO(y.DO.Attrs(attrs...))
}

func (y youtubeSubscriptionDo) Assign(attrs ...field.AssignExpr) IYoutubeSubscriptionDo {
	return y.withDO(y.DO.Assign(attrs...))
}

func (y youtubeSubscriptionDo) Joins(fields ...field.RelationField) IYoutubeSubscriptionDo {
	for _, _f := range fields {
		y = *y.withDO(y.DO.Joins(_f))
	}
	return &y
}

func (y youtubeSubscriptionDo) Preload(fields ...field.RelationField) IYoutubeSubscriptionDo {
	for _, _f := range fields {
		y = *y.withDO(y.DO.Preload(_f))
	}
	return &y
}

func (y youtubeSubscriptionDo) FirstOrInit() (*models.YoutubeSubscription, error) {
	if result, err := y.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.YoutubeSubscription), nil
	}
}

func (y youtubeSubscriptionDo) FirstOrCreate() (*models.YoutubeSubscription, error) {
	if result, err := y.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.YoutubeSubscription), nil
	}
}

func (y youtubeSubscriptionDo) FindByPage(offset int, limit int) (result []*models.YoutubeSubscription, count int64, err error) {
	result, err = y.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = y.Offset(-1).Limit(-1).Count()
	return
}

func (y youtubeSubscriptionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = y.Count()
	if err != nil {
		return
	}

	err = y.Offset(offset).Limit(limit).Scan(result)
	return
}

func (y youtubeSubscriptionDo) Scan(result interface{}) (err error) {
	return y.DO.Scan(result)
}

func (y youtubeSubscriptionDo) Delete(models ...*models.YoutubeSubscription) (result gen.ResultInfo, err error) {
	return y.DO.Delete(models)
}

func (y *youtubeSubscriptionDo) withDO(do gen.Dao) *youtubeSubscriptionDo {
	y.DO = *do.(*gen.DO)
	return y
}
