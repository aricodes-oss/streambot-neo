// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"streambot/models"
)

func newYoutubeSubscriptions(db *gorm.DB, opts ...gen.DOOption) youtubeSubscriptions {
	_youtubeSubscriptions := youtubeSubscriptions{}

	_youtubeSubscriptions.youtubeSubscriptionsDo.UseDB(db, opts...)
	_youtubeSubscriptions.youtubeSubscriptionsDo.UseModel(&models.YoutubeSubscriptions{})

	tableName := _youtubeSubscriptions.youtubeSubscriptionsDo.TableName()
	_youtubeSubscriptions.ALL = field.NewAsterisk(tableName)
	_youtubeSubscriptions.ID = field.NewUint(tableName, "id")
	_youtubeSubscriptions.CreatedAt = field.NewTime(tableName, "created_at")
	_youtubeSubscriptions.UpdatedAt = field.NewTime(tableName, "updated_at")
	_youtubeSubscriptions.DeletedAt = field.NewField(tableName, "deleted_at")
	_youtubeSubscriptions.ReservationID = field.NewInt(tableName, "reservation_id")
	_youtubeSubscriptions.ChannelID = field.NewString(tableName, "channel_id")

	_youtubeSubscriptions.fillFieldMap()

	return _youtubeSubscriptions
}

type youtubeSubscriptions struct {
	youtubeSubscriptionsDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	ReservationID field.Int
	ChannelID     field.String

	fieldMap map[string]field.Expr
}

func (y youtubeSubscriptions) Table(newTableName string) *youtubeSubscriptions {
	y.youtubeSubscriptionsDo.UseTable(newTableName)
	return y.updateTableName(newTableName)
}

func (y youtubeSubscriptions) As(alias string) *youtubeSubscriptions {
	y.youtubeSubscriptionsDo.DO = *(y.youtubeSubscriptionsDo.As(alias).(*gen.DO))
	return y.updateTableName(alias)
}

func (y *youtubeSubscriptions) updateTableName(table string) *youtubeSubscriptions {
	y.ALL = field.NewAsterisk(table)
	y.ID = field.NewUint(table, "id")
	y.CreatedAt = field.NewTime(table, "created_at")
	y.UpdatedAt = field.NewTime(table, "updated_at")
	y.DeletedAt = field.NewField(table, "deleted_at")
	y.ReservationID = field.NewInt(table, "reservation_id")
	y.ChannelID = field.NewString(table, "channel_id")

	y.fillFieldMap()

	return y
}

func (y *youtubeSubscriptions) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := y.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (y *youtubeSubscriptions) fillFieldMap() {
	y.fieldMap = make(map[string]field.Expr, 6)
	y.fieldMap["id"] = y.ID
	y.fieldMap["created_at"] = y.CreatedAt
	y.fieldMap["updated_at"] = y.UpdatedAt
	y.fieldMap["deleted_at"] = y.DeletedAt
	y.fieldMap["reservation_id"] = y.ReservationID
	y.fieldMap["channel_id"] = y.ChannelID
}

func (y youtubeSubscriptions) clone(db *gorm.DB) youtubeSubscriptions {
	y.youtubeSubscriptionsDo.ReplaceConnPool(db.Statement.ConnPool)
	return y
}

func (y youtubeSubscriptions) replaceDB(db *gorm.DB) youtubeSubscriptions {
	y.youtubeSubscriptionsDo.ReplaceDB(db)
	return y
}

type youtubeSubscriptionsDo struct{ gen.DO }

type IYoutubeSubscriptionsDo interface {
	gen.SubQuery
	Debug() IYoutubeSubscriptionsDo
	WithContext(ctx context.Context) IYoutubeSubscriptionsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IYoutubeSubscriptionsDo
	WriteDB() IYoutubeSubscriptionsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IYoutubeSubscriptionsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IYoutubeSubscriptionsDo
	Not(conds ...gen.Condition) IYoutubeSubscriptionsDo
	Or(conds ...gen.Condition) IYoutubeSubscriptionsDo
	Select(conds ...field.Expr) IYoutubeSubscriptionsDo
	Where(conds ...gen.Condition) IYoutubeSubscriptionsDo
	Order(conds ...field.Expr) IYoutubeSubscriptionsDo
	Distinct(cols ...field.Expr) IYoutubeSubscriptionsDo
	Omit(cols ...field.Expr) IYoutubeSubscriptionsDo
	Join(table schema.Tabler, on ...field.Expr) IYoutubeSubscriptionsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IYoutubeSubscriptionsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IYoutubeSubscriptionsDo
	Group(cols ...field.Expr) IYoutubeSubscriptionsDo
	Having(conds ...gen.Condition) IYoutubeSubscriptionsDo
	Limit(limit int) IYoutubeSubscriptionsDo
	Offset(offset int) IYoutubeSubscriptionsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IYoutubeSubscriptionsDo
	Unscoped() IYoutubeSubscriptionsDo
	Create(values ...*models.YoutubeSubscriptions) error
	CreateInBatches(values []*models.YoutubeSubscriptions, batchSize int) error
	Save(values ...*models.YoutubeSubscriptions) error
	First() (*models.YoutubeSubscriptions, error)
	Take() (*models.YoutubeSubscriptions, error)
	Last() (*models.YoutubeSubscriptions, error)
	Find() ([]*models.YoutubeSubscriptions, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.YoutubeSubscriptions, err error)
	FindInBatches(result *[]*models.YoutubeSubscriptions, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.YoutubeSubscriptions) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IYoutubeSubscriptionsDo
	Assign(attrs ...field.AssignExpr) IYoutubeSubscriptionsDo
	Joins(fields ...field.RelationField) IYoutubeSubscriptionsDo
	Preload(fields ...field.RelationField) IYoutubeSubscriptionsDo
	FirstOrInit() (*models.YoutubeSubscriptions, error)
	FirstOrCreate() (*models.YoutubeSubscriptions, error)
	FindByPage(offset int, limit int) (result []*models.YoutubeSubscriptions, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IYoutubeSubscriptionsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (y youtubeSubscriptionsDo) Debug() IYoutubeSubscriptionsDo {
	return y.withDO(y.DO.Debug())
}

func (y youtubeSubscriptionsDo) WithContext(ctx context.Context) IYoutubeSubscriptionsDo {
	return y.withDO(y.DO.WithContext(ctx))
}

func (y youtubeSubscriptionsDo) ReadDB() IYoutubeSubscriptionsDo {
	return y.Clauses(dbresolver.Read)
}

func (y youtubeSubscriptionsDo) WriteDB() IYoutubeSubscriptionsDo {
	return y.Clauses(dbresolver.Write)
}

func (y youtubeSubscriptionsDo) Session(config *gorm.Session) IYoutubeSubscriptionsDo {
	return y.withDO(y.DO.Session(config))
}

func (y youtubeSubscriptionsDo) Clauses(conds ...clause.Expression) IYoutubeSubscriptionsDo {
	return y.withDO(y.DO.Clauses(conds...))
}

func (y youtubeSubscriptionsDo) Returning(value interface{}, columns ...string) IYoutubeSubscriptionsDo {
	return y.withDO(y.DO.Returning(value, columns...))
}

func (y youtubeSubscriptionsDo) Not(conds ...gen.Condition) IYoutubeSubscriptionsDo {
	return y.withDO(y.DO.Not(conds...))
}

func (y youtubeSubscriptionsDo) Or(conds ...gen.Condition) IYoutubeSubscriptionsDo {
	return y.withDO(y.DO.Or(conds...))
}

func (y youtubeSubscriptionsDo) Select(conds ...field.Expr) IYoutubeSubscriptionsDo {
	return y.withDO(y.DO.Select(conds...))
}

func (y youtubeSubscriptionsDo) Where(conds ...gen.Condition) IYoutubeSubscriptionsDo {
	return y.withDO(y.DO.Where(conds...))
}

func (y youtubeSubscriptionsDo) Order(conds ...field.Expr) IYoutubeSubscriptionsDo {
	return y.withDO(y.DO.Order(conds...))
}

func (y youtubeSubscriptionsDo) Distinct(cols ...field.Expr) IYoutubeSubscriptionsDo {
	return y.withDO(y.DO.Distinct(cols...))
}

func (y youtubeSubscriptionsDo) Omit(cols ...field.Expr) IYoutubeSubscriptionsDo {
	return y.withDO(y.DO.Omit(cols...))
}

func (y youtubeSubscriptionsDo) Join(table schema.Tabler, on ...field.Expr) IYoutubeSubscriptionsDo {
	return y.withDO(y.DO.Join(table, on...))
}

func (y youtubeSubscriptionsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IYoutubeSubscriptionsDo {
	return y.withDO(y.DO.LeftJoin(table, on...))
}

func (y youtubeSubscriptionsDo) RightJoin(table schema.Tabler, on ...field.Expr) IYoutubeSubscriptionsDo {
	return y.withDO(y.DO.RightJoin(table, on...))
}

func (y youtubeSubscriptionsDo) Group(cols ...field.Expr) IYoutubeSubscriptionsDo {
	return y.withDO(y.DO.Group(cols...))
}

func (y youtubeSubscriptionsDo) Having(conds ...gen.Condition) IYoutubeSubscriptionsDo {
	return y.withDO(y.DO.Having(conds...))
}

func (y youtubeSubscriptionsDo) Limit(limit int) IYoutubeSubscriptionsDo {
	return y.withDO(y.DO.Limit(limit))
}

func (y youtubeSubscriptionsDo) Offset(offset int) IYoutubeSubscriptionsDo {
	return y.withDO(y.DO.Offset(offset))
}

func (y youtubeSubscriptionsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IYoutubeSubscriptionsDo {
	return y.withDO(y.DO.Scopes(funcs...))
}

func (y youtubeSubscriptionsDo) Unscoped() IYoutubeSubscriptionsDo {
	return y.withDO(y.DO.Unscoped())
}

func (y youtubeSubscriptionsDo) Create(values ...*models.YoutubeSubscriptions) error {
	if len(values) == 0 {
		return nil
	}
	return y.DO.Create(values)
}

func (y youtubeSubscriptionsDo) CreateInBatches(values []*models.YoutubeSubscriptions, batchSize int) error {
	return y.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (y youtubeSubscriptionsDo) Save(values ...*models.YoutubeSubscriptions) error {
	if len(values) == 0 {
		return nil
	}
	return y.DO.Save(values)
}

func (y youtubeSubscriptionsDo) First() (*models.YoutubeSubscriptions, error) {
	if result, err := y.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.YoutubeSubscriptions), nil
	}
}

func (y youtubeSubscriptionsDo) Take() (*models.YoutubeSubscriptions, error) {
	if result, err := y.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.YoutubeSubscriptions), nil
	}
}

func (y youtubeSubscriptionsDo) Last() (*models.YoutubeSubscriptions, error) {
	if result, err := y.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.YoutubeSubscriptions), nil
	}
}

func (y youtubeSubscriptionsDo) Find() ([]*models.YoutubeSubscriptions, error) {
	result, err := y.DO.Find()
	return result.([]*models.YoutubeSubscriptions), err
}

func (y youtubeSubscriptionsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.YoutubeSubscriptions, err error) {
	buf := make([]*models.YoutubeSubscriptions, 0, batchSize)
	err = y.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (y youtubeSubscriptionsDo) FindInBatches(result *[]*models.YoutubeSubscriptions, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return y.DO.FindInBatches(result, batchSize, fc)
}

func (y youtubeSubscriptionsDo) Attrs(attrs ...field.AssignExpr) IYoutubeSubscriptionsDo {
	return y.withDO(y.DO.Attrs(attrs...))
}

func (y youtubeSubscriptionsDo) Assign(attrs ...field.AssignExpr) IYoutubeSubscriptionsDo {
	return y.withDO(y.DO.Assign(attrs...))
}

func (y youtubeSubscriptionsDo) Joins(fields ...field.RelationField) IYoutubeSubscriptionsDo {
	for _, _f := range fields {
		y = *y.withDO(y.DO.Joins(_f))
	}
	return &y
}

func (y youtubeSubscriptionsDo) Preload(fields ...field.RelationField) IYoutubeSubscriptionsDo {
	for _, _f := range fields {
		y = *y.withDO(y.DO.Preload(_f))
	}
	return &y
}

func (y youtubeSubscriptionsDo) FirstOrInit() (*models.YoutubeSubscriptions, error) {
	if result, err := y.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.YoutubeSubscriptions), nil
	}
}

func (y youtubeSubscriptionsDo) FirstOrCreate() (*models.YoutubeSubscriptions, error) {
	if result, err := y.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.YoutubeSubscriptions), nil
	}
}

func (y youtubeSubscriptionsDo) FindByPage(offset int, limit int) (result []*models.YoutubeSubscriptions, count int64, err error) {
	result, err = y.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = y.Offset(-1).Limit(-1).Count()
	return
}

func (y youtubeSubscriptionsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = y.Count()
	if err != nil {
		return
	}

	err = y.Offset(offset).Limit(limit).Scan(result)
	return
}

func (y youtubeSubscriptionsDo) Scan(result interface{}) (err error) {
	return y.DO.Scan(result)
}

func (y youtubeSubscriptionsDo) Delete(models ...*models.YoutubeSubscriptions) (result gen.ResultInfo, err error) {
	return y.DO.Delete(models)
}

func (y *youtubeSubscriptionsDo) withDO(do gen.Dao) *youtubeSubscriptionsDo {
	y.DO = *do.(*gen.DO)
	return y
}
