// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                    = new(Query)
	BlacklistedUsers     *blacklistedUsers
	GameSubscriptions    *gameSubscriptions
	Reservation          *reservation
	YoutubeSubscriptions *youtubeSubscriptions
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	BlacklistedUsers = &Q.BlacklistedUsers
	GameSubscriptions = &Q.GameSubscriptions
	Reservation = &Q.Reservation
	YoutubeSubscriptions = &Q.YoutubeSubscriptions
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                   db,
		BlacklistedUsers:     newBlacklistedUsers(db, opts...),
		GameSubscriptions:    newGameSubscriptions(db, opts...),
		Reservation:          newReservation(db, opts...),
		YoutubeSubscriptions: newYoutubeSubscriptions(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	BlacklistedUsers     blacklistedUsers
	GameSubscriptions    gameSubscriptions
	Reservation          reservation
	YoutubeSubscriptions youtubeSubscriptions
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		BlacklistedUsers:     q.BlacklistedUsers.clone(db),
		GameSubscriptions:    q.GameSubscriptions.clone(db),
		Reservation:          q.Reservation.clone(db),
		YoutubeSubscriptions: q.YoutubeSubscriptions.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		BlacklistedUsers:     q.BlacklistedUsers.replaceDB(db),
		GameSubscriptions:    q.GameSubscriptions.replaceDB(db),
		Reservation:          q.Reservation.replaceDB(db),
		YoutubeSubscriptions: q.YoutubeSubscriptions.replaceDB(db),
	}
}

type queryCtx struct {
	BlacklistedUsers     IBlacklistedUsersDo
	GameSubscriptions    IGameSubscriptionsDo
	Reservation          IReservationDo
	YoutubeSubscriptions IYoutubeSubscriptionsDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		BlacklistedUsers:     q.BlacklistedUsers.WithContext(ctx),
		GameSubscriptions:    q.GameSubscriptions.WithContext(ctx),
		Reservation:          q.Reservation.WithContext(ctx),
		YoutubeSubscriptions: q.YoutubeSubscriptions.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
