// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"streambot/models"
)

func newStream(db *gorm.DB, opts ...gen.DOOption) stream {
	_stream := stream{}

	_stream.streamDo.UseDB(db, opts...)
	_stream.streamDo.UseModel(&models.Stream{})

	tableName := _stream.streamDo.TableName()
	_stream.ALL = field.NewAsterisk(tableName)
	_stream.ID = field.NewUint(tableName, "id")
	_stream.CreatedAt = field.NewTime(tableName, "created_at")
	_stream.UpdatedAt = field.NewTime(tableName, "updated_at")
	_stream.DeletedAt = field.NewField(tableName, "deleted_at")

	_stream.fillFieldMap()

	return _stream
}

type stream struct {
	streamDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (s stream) Table(newTableName string) *stream {
	s.streamDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s stream) As(alias string) *stream {
	s.streamDo.DO = *(s.streamDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *stream) updateTableName(table string) *stream {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *stream) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *stream) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s stream) clone(db *gorm.DB) stream {
	s.streamDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s stream) replaceDB(db *gorm.DB) stream {
	s.streamDo.ReplaceDB(db)
	return s
}

type streamDo struct{ gen.DO }

type IStreamDo interface {
	gen.SubQuery
	Debug() IStreamDo
	WithContext(ctx context.Context) IStreamDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStreamDo
	WriteDB() IStreamDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStreamDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStreamDo
	Not(conds ...gen.Condition) IStreamDo
	Or(conds ...gen.Condition) IStreamDo
	Select(conds ...field.Expr) IStreamDo
	Where(conds ...gen.Condition) IStreamDo
	Order(conds ...field.Expr) IStreamDo
	Distinct(cols ...field.Expr) IStreamDo
	Omit(cols ...field.Expr) IStreamDo
	Join(table schema.Tabler, on ...field.Expr) IStreamDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStreamDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStreamDo
	Group(cols ...field.Expr) IStreamDo
	Having(conds ...gen.Condition) IStreamDo
	Limit(limit int) IStreamDo
	Offset(offset int) IStreamDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStreamDo
	Unscoped() IStreamDo
	Create(values ...*models.Stream) error
	CreateInBatches(values []*models.Stream, batchSize int) error
	Save(values ...*models.Stream) error
	First() (*models.Stream, error)
	Take() (*models.Stream, error)
	Last() (*models.Stream, error)
	Find() ([]*models.Stream, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Stream, err error)
	FindInBatches(result *[]*models.Stream, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Stream) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStreamDo
	Assign(attrs ...field.AssignExpr) IStreamDo
	Joins(fields ...field.RelationField) IStreamDo
	Preload(fields ...field.RelationField) IStreamDo
	FirstOrInit() (*models.Stream, error)
	FirstOrCreate() (*models.Stream, error)
	FindByPage(offset int, limit int) (result []*models.Stream, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStreamDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s streamDo) Debug() IStreamDo {
	return s.withDO(s.DO.Debug())
}

func (s streamDo) WithContext(ctx context.Context) IStreamDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s streamDo) ReadDB() IStreamDo {
	return s.Clauses(dbresolver.Read)
}

func (s streamDo) WriteDB() IStreamDo {
	return s.Clauses(dbresolver.Write)
}

func (s streamDo) Session(config *gorm.Session) IStreamDo {
	return s.withDO(s.DO.Session(config))
}

func (s streamDo) Clauses(conds ...clause.Expression) IStreamDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s streamDo) Returning(value interface{}, columns ...string) IStreamDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s streamDo) Not(conds ...gen.Condition) IStreamDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s streamDo) Or(conds ...gen.Condition) IStreamDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s streamDo) Select(conds ...field.Expr) IStreamDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s streamDo) Where(conds ...gen.Condition) IStreamDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s streamDo) Order(conds ...field.Expr) IStreamDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s streamDo) Distinct(cols ...field.Expr) IStreamDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s streamDo) Omit(cols ...field.Expr) IStreamDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s streamDo) Join(table schema.Tabler, on ...field.Expr) IStreamDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s streamDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStreamDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s streamDo) RightJoin(table schema.Tabler, on ...field.Expr) IStreamDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s streamDo) Group(cols ...field.Expr) IStreamDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s streamDo) Having(conds ...gen.Condition) IStreamDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s streamDo) Limit(limit int) IStreamDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s streamDo) Offset(offset int) IStreamDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s streamDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStreamDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s streamDo) Unscoped() IStreamDo {
	return s.withDO(s.DO.Unscoped())
}

func (s streamDo) Create(values ...*models.Stream) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s streamDo) CreateInBatches(values []*models.Stream, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s streamDo) Save(values ...*models.Stream) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s streamDo) First() (*models.Stream, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Stream), nil
	}
}

func (s streamDo) Take() (*models.Stream, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Stream), nil
	}
}

func (s streamDo) Last() (*models.Stream, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Stream), nil
	}
}

func (s streamDo) Find() ([]*models.Stream, error) {
	result, err := s.DO.Find()
	return result.([]*models.Stream), err
}

func (s streamDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Stream, err error) {
	buf := make([]*models.Stream, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s streamDo) FindInBatches(result *[]*models.Stream, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s streamDo) Attrs(attrs ...field.AssignExpr) IStreamDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s streamDo) Assign(attrs ...field.AssignExpr) IStreamDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s streamDo) Joins(fields ...field.RelationField) IStreamDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s streamDo) Preload(fields ...field.RelationField) IStreamDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s streamDo) FirstOrInit() (*models.Stream, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Stream), nil
	}
}

func (s streamDo) FirstOrCreate() (*models.Stream, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Stream), nil
	}
}

func (s streamDo) FindByPage(offset int, limit int) (result []*models.Stream, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s streamDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s streamDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s streamDo) Delete(models ...*models.Stream) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *streamDo) withDO(do gen.Dao) *streamDo {
	s.DO = *do.(*gen.DO)
	return s
}
